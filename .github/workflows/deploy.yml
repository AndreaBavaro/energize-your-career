name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Install dependencies
        run: npm ci
      - name: Create .env file for build
        run: |
          echo "Creating .env file with all required variables"
          echo "VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}" >> .env
          echo "VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}" >> .env
          echo "VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}" >> .env
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env
          echo "VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}" >> .env
          echo ".env file created successfully"
      
      - name: Setup Firebase configuration
        run: |
          echo "Setting up Firebase configuration for build"
          if [ ! -d "src/config" ]; then
            mkdir -p src/config
          fi
          if [ -f "src/config/firebase.placeholder.ts" ]; then
            cp src/config/firebase.placeholder.ts src/config/firebase.ts
            echo "Copied placeholder Firebase configuration"
          else
            echo "// This is a placeholder file for the build process" > src/config/firebase.ts
            echo "// The actual Firebase configuration is loaded from environment variables at runtime" >> src/config/firebase.ts
            echo "" >> src/config/firebase.ts
            echo "import { initializeApp } from \"firebase/app\";" >> src/config/firebase.ts
            echo "import { getStorage } from \"firebase/storage\";" >> src/config/firebase.ts
            echo "import { getAnalytics } from \"firebase/analytics\";" >> src/config/firebase.ts
            echo "import { getFirestore } from \"firebase/firestore\";" >> src/config/firebase.ts
            echo "" >> src/config/firebase.ts
            echo "// Your web app's Firebase configuration using environment variables" >> src/config/firebase.ts
            echo "const firebaseConfig = {" >> src/config/firebase.ts
            echo "  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || ''," >> src/config/firebase.ts
            echo "  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || ''," >> src/config/firebase.ts
            echo "  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || ''," >> src/config/firebase.ts
            echo "  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || ''," >> src/config/firebase.ts
            echo "  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || ''," >> src/config/firebase.ts
            echo "  appId: import.meta.env.VITE_FIREBASE_APP_ID || ''," >> src/config/firebase.ts
            echo "  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID || ''" >> src/config/firebase.ts
            echo "};" >> src/config/firebase.ts
            echo "" >> src/config/firebase.ts
            echo "// Initialize Firebase" >> src/config/firebase.ts
            echo "const app = initializeApp(firebaseConfig);" >> src/config/firebase.ts
            echo "const storage = getStorage(app);" >> src/config/firebase.ts
            echo "const firestore = getFirestore(app);" >> src/config/firebase.ts
            echo "" >> src/config/firebase.ts
            echo "// Initialize Analytics in browser environment only" >> src/config/firebase.ts
            echo "let analytics = null;" >> src/config/firebase.ts
            echo "if (typeof window !== 'undefined') {" >> src/config/firebase.ts
            echo "  try {" >> src/config/firebase.ts
            echo "    analytics = getAnalytics(app);" >> src/config/firebase.ts
            echo "  } catch (error) {" >> src/config/firebase.ts
            echo "    console.error('Error initializing Firebase Analytics:', error);" >> src/config/firebase.ts
            echo "  }" >> src/config/firebase.ts
            echo "}" >> src/config/firebase.ts
            echo "" >> src/config/firebase.ts
            echo "export { storage, analytics, firestore };" >> src/config/firebase.ts
            echo "Created Firebase configuration file"
          fi
      - name: Build
        run: npm run build
        env:
          VITE_EMAILJS_SERVICE_ID: ${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID: ${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
          VITE_EMAILJS_PUBLIC_KEY: ${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
      - name: Debug Environment Variables
        run: |
          echo "Checking if environment variables are set (will not show actual values for security):"
          if [ -n "$VITE_EMAILJS_SERVICE_ID" ]; then echo "VITE_EMAILJS_SERVICE_ID: Set"; else echo "VITE_EMAILJS_SERVICE_ID: Not set"; fi
          if [ -n "$VITE_EMAILJS_TEMPLATE_ID" ]; then echo "VITE_EMAILJS_TEMPLATE_ID: Set"; else echo "VITE_EMAILJS_TEMPLATE_ID: Not set"; fi
          if [ -n "$VITE_EMAILJS_PUBLIC_KEY" ]; then echo "VITE_EMAILJS_PUBLIC_KEY: Set"; else echo "VITE_EMAILJS_PUBLIC_KEY: Not set"; fi
          if [ -n "$VITE_FIREBASE_API_KEY" ]; then echo "VITE_FIREBASE_API_KEY: Set"; else echo "VITE_FIREBASE_API_KEY: Not set"; fi
          if [ -n "$VITE_FIREBASE_AUTH_DOMAIN" ]; then echo "VITE_FIREBASE_AUTH_DOMAIN: Set"; else echo "VITE_FIREBASE_AUTH_DOMAIN: Not set"; fi
          if [ -n "$VITE_FIREBASE_PROJECT_ID" ]; then echo "VITE_FIREBASE_PROJECT_ID: Set"; else echo "VITE_FIREBASE_PROJECT_ID: Not set"; fi
          if [ -n "$VITE_FIREBASE_STORAGE_BUCKET" ]; then echo "VITE_FIREBASE_STORAGE_BUCKET: Set"; else echo "VITE_FIREBASE_STORAGE_BUCKET: Not set"; fi
          if [ -n "$VITE_FIREBASE_MESSAGING_SENDER_ID" ]; then echo "VITE_FIREBASE_MESSAGING_SENDER_ID: Set"; else echo "VITE_FIREBASE_MESSAGING_SENDER_ID: Not set"; fi
          if [ -n "$VITE_FIREBASE_APP_ID" ]; then echo "VITE_FIREBASE_APP_ID: Set"; else echo "VITE_FIREBASE_APP_ID: Not set"; fi
          if [ -n "$VITE_FIREBASE_MEASUREMENT_ID" ]; then echo "VITE_FIREBASE_MEASUREMENT_ID: Set"; else echo "VITE_FIREBASE_MEASUREMENT_ID: Not set"; fi
          
          echo "Checking .env file content (will not show actual values):"
          if grep -q "VITE_EMAILJS_SERVICE_ID" .env; then echo ".env contains VITE_EMAILJS_SERVICE_ID"; else echo ".env missing VITE_EMAILJS_SERVICE_ID"; fi
          if grep -q "VITE_EMAILJS_TEMPLATE_ID" .env; then echo ".env contains VITE_EMAILJS_TEMPLATE_ID"; else echo ".env missing VITE_EMAILJS_TEMPLATE_ID"; fi
          if grep -q "VITE_EMAILJS_PUBLIC_KEY" .env; then echo ".env contains VITE_EMAILJS_PUBLIC_KEY"; else echo ".env missing VITE_EMAILJS_PUBLIC_KEY"; fi
          if grep -q "VITE_FIREBASE_API_KEY" .env; then echo ".env contains VITE_FIREBASE_API_KEY"; else echo ".env missing VITE_FIREBASE_API_KEY"; fi
          if grep -q "VITE_FIREBASE_AUTH_DOMAIN" .env; then echo ".env contains VITE_FIREBASE_AUTH_DOMAIN"; else echo ".env missing VITE_FIREBASE_AUTH_DOMAIN"; fi
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
